
t2:     file format elf32-i386


Disassembly of section .init:

08048674 <_init>:
 8048674:	53                   	push   %ebx
 8048675:	83 ec 08             	sub    $0x8,%esp
 8048678:	e8 a3 01 00 00       	call   8048820 <__x86.get_pc_thunk.bx>
 804867d:	81 c3 83 29 00 00    	add    $0x2983,%ebx
 8048683:	8b 83 fc ff ff ff    	mov    -0x4(%ebx),%eax
 8048689:	85 c0                	test   %eax,%eax
 804868b:	74 05                	je     8048692 <_init+0x1e>
 804868d:	e8 4e 01 00 00       	call   80487e0 <pthread_create@plt+0x10>
 8048692:	83 c4 08             	add    $0x8,%esp
 8048695:	5b                   	pop    %ebx
 8048696:	c3                   	ret    

Disassembly of section .plt:

080486a0 <setitimer@plt-0x10>:
 80486a0:	ff 35 04 b0 04 08    	pushl  0x804b004
 80486a6:	ff 25 08 b0 04 08    	jmp    *0x804b008
 80486ac:	00 00                	add    %al,(%eax)
	...

080486b0 <setitimer@plt>:
 80486b0:	ff 25 0c b0 04 08    	jmp    *0x804b00c
 80486b6:	68 00 00 00 00       	push   $0x0
 80486bb:	e9 e0 ff ff ff       	jmp    80486a0 <_init+0x2c>

080486c0 <pthread_attr_init@plt>:
 80486c0:	ff 25 10 b0 04 08    	jmp    *0x804b010
 80486c6:	68 08 00 00 00       	push   $0x8
 80486cb:	e9 d0 ff ff ff       	jmp    80486a0 <_init+0x2c>

080486d0 <strcmp@plt>:
 80486d0:	ff 25 14 b0 04 08    	jmp    *0x804b014
 80486d6:	68 10 00 00 00       	push   $0x10
 80486db:	e9 c0 ff ff ff       	jmp    80486a0 <_init+0x2c>

080486e0 <printf@plt>:
 80486e0:	ff 25 18 b0 04 08    	jmp    *0x804b018
 80486e6:	68 18 00 00 00       	push   $0x18
 80486eb:	e9 b0 ff ff ff       	jmp    80486a0 <_init+0x2c>

080486f0 <sigprocmask@plt>:
 80486f0:	ff 25 1c b0 04 08    	jmp    *0x804b01c
 80486f6:	68 20 00 00 00       	push   $0x20
 80486fb:	e9 a0 ff ff ff       	jmp    80486a0 <_init+0x2c>

08048700 <free@plt>:
 8048700:	ff 25 20 b0 04 08    	jmp    *0x804b020
 8048706:	68 28 00 00 00       	push   $0x28
 804870b:	e9 90 ff ff ff       	jmp    80486a0 <_init+0x2c>

08048710 <signal@plt>:
 8048710:	ff 25 24 b0 04 08    	jmp    *0x804b024
 8048716:	68 30 00 00 00       	push   $0x30
 804871b:	e9 80 ff ff ff       	jmp    80486a0 <_init+0x2c>

08048720 <gettimeofday@plt>:
 8048720:	ff 25 28 b0 04 08    	jmp    *0x804b028
 8048726:	68 38 00 00 00       	push   $0x38
 804872b:	e9 70 ff ff ff       	jmp    80486a0 <_init+0x2c>

08048730 <__stack_chk_fail@plt>:
 8048730:	ff 25 2c b0 04 08    	jmp    *0x804b02c
 8048736:	68 40 00 00 00       	push   $0x40
 804873b:	e9 60 ff ff ff       	jmp    80486a0 <_init+0x2c>

08048740 <perror@plt>:
 8048740:	ff 25 30 b0 04 08    	jmp    *0x804b030
 8048746:	68 48 00 00 00       	push   $0x48
 804874b:	e9 50 ff ff ff       	jmp    80486a0 <_init+0x2c>

08048750 <strcpy@plt>:
 8048750:	ff 25 34 b0 04 08    	jmp    *0x804b034
 8048756:	68 50 00 00 00       	push   $0x50
 804875b:	e9 40 ff ff ff       	jmp    80486a0 <_init+0x2c>

08048760 <malloc@plt>:
 8048760:	ff 25 38 b0 04 08    	jmp    *0x804b038
 8048766:	68 58 00 00 00       	push   $0x58
 804876b:	e9 30 ff ff ff       	jmp    80486a0 <_init+0x2c>

08048770 <puts@plt>:
 8048770:	ff 25 3c b0 04 08    	jmp    *0x804b03c
 8048776:	68 60 00 00 00       	push   $0x60
 804877b:	e9 20 ff ff ff       	jmp    80486a0 <_init+0x2c>

08048780 <exit@plt>:
 8048780:	ff 25 40 b0 04 08    	jmp    *0x804b040
 8048786:	68 68 00 00 00       	push   $0x68
 804878b:	e9 10 ff ff ff       	jmp    80486a0 <_init+0x2c>

08048790 <__libc_start_main@plt>:
 8048790:	ff 25 44 b0 04 08    	jmp    *0x804b044
 8048796:	68 70 00 00 00       	push   $0x70
 804879b:	e9 00 ff ff ff       	jmp    80486a0 <_init+0x2c>

080487a0 <sigaddset@plt>:
 80487a0:	ff 25 48 b0 04 08    	jmp    *0x804b048
 80487a6:	68 78 00 00 00       	push   $0x78
 80487ab:	e9 f0 fe ff ff       	jmp    80486a0 <_init+0x2c>

080487b0 <sigemptyset@plt>:
 80487b0:	ff 25 4c b0 04 08    	jmp    *0x804b04c
 80487b6:	68 80 00 00 00       	push   $0x80
 80487bb:	e9 e0 fe ff ff       	jmp    80486a0 <_init+0x2c>

080487c0 <pthread_join@plt>:
 80487c0:	ff 25 50 b0 04 08    	jmp    *0x804b050
 80487c6:	68 88 00 00 00       	push   $0x88
 80487cb:	e9 d0 fe ff ff       	jmp    80486a0 <_init+0x2c>

080487d0 <pthread_create@plt>:
 80487d0:	ff 25 54 b0 04 08    	jmp    *0x804b054
 80487d6:	68 90 00 00 00       	push   $0x90
 80487db:	e9 c0 fe ff ff       	jmp    80486a0 <_init+0x2c>

Disassembly of section .plt.got:

080487e0 <.plt.got>:
 80487e0:	ff 25 fc af 04 08    	jmp    *0x804affc
 80487e6:	66 90                	xchg   %ax,%ax

Disassembly of section .text:

080487f0 <_start>:
 80487f0:	31 ed                	xor    %ebp,%ebp
 80487f2:	5e                   	pop    %esi
 80487f3:	89 e1                	mov    %esp,%ecx
 80487f5:	83 e4 f0             	and    $0xfffffff0,%esp
 80487f8:	50                   	push   %eax
 80487f9:	54                   	push   %esp
 80487fa:	52                   	push   %edx
 80487fb:	68 10 96 04 08       	push   $0x8049610
 8048800:	68 b0 95 04 08       	push   $0x80495b0
 8048805:	51                   	push   %ecx
 8048806:	56                   	push   %esi
 8048807:	68 86 8a 04 08       	push   $0x8048a86
 804880c:	e8 7f ff ff ff       	call   8048790 <__libc_start_main@plt>
 8048811:	f4                   	hlt    
 8048812:	66 90                	xchg   %ax,%ax
 8048814:	66 90                	xchg   %ax,%ax
 8048816:	66 90                	xchg   %ax,%ax
 8048818:	66 90                	xchg   %ax,%ax
 804881a:	66 90                	xchg   %ax,%ax
 804881c:	66 90                	xchg   %ax,%ax
 804881e:	66 90                	xchg   %ax,%ax

08048820 <__x86.get_pc_thunk.bx>:
 8048820:	8b 1c 24             	mov    (%esp),%ebx
 8048823:	c3                   	ret    
 8048824:	66 90                	xchg   %ax,%ax
 8048826:	66 90                	xchg   %ax,%ax
 8048828:	66 90                	xchg   %ax,%ax
 804882a:	66 90                	xchg   %ax,%ax
 804882c:	66 90                	xchg   %ax,%ax
 804882e:	66 90                	xchg   %ax,%ax

08048830 <deregister_tm_clones>:
 8048830:	b8 e3 c0 04 08       	mov    $0x804c0e3,%eax
 8048835:	2d e0 c0 04 08       	sub    $0x804c0e0,%eax
 804883a:	83 f8 06             	cmp    $0x6,%eax
 804883d:	76 1a                	jbe    8048859 <deregister_tm_clones+0x29>
 804883f:	b8 00 00 00 00       	mov    $0x0,%eax
 8048844:	85 c0                	test   %eax,%eax
 8048846:	74 11                	je     8048859 <deregister_tm_clones+0x29>
 8048848:	55                   	push   %ebp
 8048849:	89 e5                	mov    %esp,%ebp
 804884b:	83 ec 14             	sub    $0x14,%esp
 804884e:	68 e0 c0 04 08       	push   $0x804c0e0
 8048853:	ff d0                	call   *%eax
 8048855:	83 c4 10             	add    $0x10,%esp
 8048858:	c9                   	leave  
 8048859:	f3 c3                	repz ret 
 804885b:	90                   	nop
 804885c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi

08048860 <register_tm_clones>:
 8048860:	b8 e0 c0 04 08       	mov    $0x804c0e0,%eax
 8048865:	2d e0 c0 04 08       	sub    $0x804c0e0,%eax
 804886a:	c1 f8 02             	sar    $0x2,%eax
 804886d:	89 c2                	mov    %eax,%edx
 804886f:	c1 ea 1f             	shr    $0x1f,%edx
 8048872:	01 d0                	add    %edx,%eax
 8048874:	d1 f8                	sar    %eax
 8048876:	74 1b                	je     8048893 <register_tm_clones+0x33>
 8048878:	ba 00 00 00 00       	mov    $0x0,%edx
 804887d:	85 d2                	test   %edx,%edx
 804887f:	74 12                	je     8048893 <register_tm_clones+0x33>
 8048881:	55                   	push   %ebp
 8048882:	89 e5                	mov    %esp,%ebp
 8048884:	83 ec 10             	sub    $0x10,%esp
 8048887:	50                   	push   %eax
 8048888:	68 e0 c0 04 08       	push   $0x804c0e0
 804888d:	ff d2                	call   *%edx
 804888f:	83 c4 10             	add    $0x10,%esp
 8048892:	c9                   	leave  
 8048893:	f3 c3                	repz ret 
 8048895:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 8048899:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

080488a0 <__do_global_dtors_aux>:
 80488a0:	80 3d e0 c0 04 08 00 	cmpb   $0x0,0x804c0e0
 80488a7:	75 13                	jne    80488bc <__do_global_dtors_aux+0x1c>
 80488a9:	55                   	push   %ebp
 80488aa:	89 e5                	mov    %esp,%ebp
 80488ac:	83 ec 08             	sub    $0x8,%esp
 80488af:	e8 7c ff ff ff       	call   8048830 <deregister_tm_clones>
 80488b4:	c6 05 e0 c0 04 08 01 	movb   $0x1,0x804c0e0
 80488bb:	c9                   	leave  
 80488bc:	f3 c3                	repz ret 
 80488be:	66 90                	xchg   %ax,%ax

080488c0 <frame_dummy>:
 80488c0:	b8 08 af 04 08       	mov    $0x804af08,%eax
 80488c5:	8b 10                	mov    (%eax),%edx
 80488c7:	85 d2                	test   %edx,%edx
 80488c9:	75 05                	jne    80488d0 <frame_dummy+0x10>
 80488cb:	eb 93                	jmp    8048860 <register_tm_clones>
 80488cd:	8d 76 00             	lea    0x0(%esi),%esi
 80488d0:	ba 00 00 00 00       	mov    $0x0,%edx
 80488d5:	85 d2                	test   %edx,%edx
 80488d7:	74 f2                	je     80488cb <frame_dummy+0xb>
 80488d9:	55                   	push   %ebp
 80488da:	89 e5                	mov    %esp,%ebp
 80488dc:	83 ec 14             	sub    $0x14,%esp
 80488df:	50                   	push   %eax
 80488e0:	ff d2                	call   *%edx
 80488e2:	83 c4 10             	add    $0x10,%esp
 80488e5:	c9                   	leave  
 80488e6:	e9 75 ff ff ff       	jmp    8048860 <register_tm_clones>

080488eb <fun1>:
#include<pthread.h>
#include"semaphore.h"

sem_t *mutex;
int abt = 5352;
void *fun1() {
 80488eb:	55                   	push   %ebp
 80488ec:	89 e5                	mov    %esp,%ebp
 80488ee:	83 ec 18             	sub    $0x18,%esp
	int i = 10;
 80488f1:	c7 45 f4 0a 00 00 00 	movl   $0xa,-0xc(%ebp)
	//sem_wait(mutex);
	while(i--) {
 80488f8:	eb 40                	jmp    804893a <fun1+0x4f>
		printf("hello,I'm fun1\n");
 80488fa:	83 ec 0c             	sub    $0xc,%esp
 80488fd:	68 30 96 04 08       	push   $0x8049630
 8048902:	e8 69 fe ff ff       	call   8048770 <puts@plt>
 8048907:	83 c4 10             	add    $0x10,%esp
	abt++;
 804890a:	a1 68 b0 04 08       	mov    0x804b068,%eax
 804890f:	83 c0 01             	add    $0x1,%eax
 8048912:	a3 68 b0 04 08       	mov    %eax,0x804b068
		printf("a = %d\n",abt);
 8048917:	a1 68 b0 04 08       	mov    0x804b068,%eax
 804891c:	83 ec 08             	sub    $0x8,%esp
 804891f:	50                   	push   %eax
 8048920:	68 3f 96 04 08       	push   $0x804963f
 8048925:	e8 b6 fd ff ff       	call   80486e0 <printf@plt>
 804892a:	83 c4 10             	add    $0x10,%esp
		mysleep(2);
 804892d:	83 ec 0c             	sub    $0xc,%esp
 8048930:	6a 02                	push   $0x2
 8048932:	e8 5a 0b 00 00       	call   8049491 <mysleep>
 8048937:	83 c4 10             	add    $0x10,%esp
sem_t *mutex;
int abt = 5352;
void *fun1() {
	int i = 10;
	//sem_wait(mutex);
	while(i--) {
 804893a:	8b 45 f4             	mov    -0xc(%ebp),%eax
 804893d:	8d 50 ff             	lea    -0x1(%eax),%edx
 8048940:	89 55 f4             	mov    %edx,-0xc(%ebp)
 8048943:	85 c0                	test   %eax,%eax
 8048945:	75 b3                	jne    80488fa <fun1+0xf>
	abt++;
		printf("a = %d\n",abt);
		mysleep(2);
	}
	//sem_post(mutex);
}
 8048947:	90                   	nop
 8048948:	c9                   	leave  
 8048949:	c3                   	ret    

0804894a <fun2>:

void *fun2() {
 804894a:	55                   	push   %ebp
 804894b:	89 e5                	mov    %esp,%ebp
 804894d:	83 ec 18             	sub    $0x18,%esp
	int i = 10;
 8048950:	c7 45 f4 0a 00 00 00 	movl   $0xa,-0xc(%ebp)
	//sem_wait(mutex);
	while(i--) {
 8048957:	eb 40                	jmp    8048999 <fun2+0x4f>
		printf("hello,I'm fun2\n");
 8048959:	83 ec 0c             	sub    $0xc,%esp
 804895c:	68 47 96 04 08       	push   $0x8049647
 8048961:	e8 0a fe ff ff       	call   8048770 <puts@plt>
 8048966:	83 c4 10             	add    $0x10,%esp
	abt++;
 8048969:	a1 68 b0 04 08       	mov    0x804b068,%eax
 804896e:	83 c0 01             	add    $0x1,%eax
 8048971:	a3 68 b0 04 08       	mov    %eax,0x804b068
		printf("a = %d\n",abt);
 8048976:	a1 68 b0 04 08       	mov    0x804b068,%eax
 804897b:	83 ec 08             	sub    $0x8,%esp
 804897e:	50                   	push   %eax
 804897f:	68 3f 96 04 08       	push   $0x804963f
 8048984:	e8 57 fd ff ff       	call   80486e0 <printf@plt>
 8048989:	83 c4 10             	add    $0x10,%esp
		mysleep(1);
 804898c:	83 ec 0c             	sub    $0xc,%esp
 804898f:	6a 01                	push   $0x1
 8048991:	e8 fb 0a 00 00       	call   8049491 <mysleep>
 8048996:	83 c4 10             	add    $0x10,%esp
}

void *fun2() {
	int i = 10;
	//sem_wait(mutex);
	while(i--) {
 8048999:	8b 45 f4             	mov    -0xc(%ebp),%eax
 804899c:	8d 50 ff             	lea    -0x1(%eax),%edx
 804899f:	89 55 f4             	mov    %edx,-0xc(%ebp)
 80489a2:	85 c0                	test   %eax,%eax
 80489a4:	75 b3                	jne    8048959 <fun2+0xf>
	abt++;
		printf("a = %d\n",abt);
		mysleep(1);
	}
	//sem_post(mutex);
}
 80489a6:	90                   	nop
 80489a7:	c9                   	leave  
 80489a8:	c3                   	ret    

080489a9 <fun3>:

void *fun3() {
 80489a9:	55                   	push   %ebp
 80489aa:	89 e5                	mov    %esp,%ebp
 80489ac:	83 ec 18             	sub    $0x18,%esp
	int i = 15;
 80489af:	c7 45 f4 0f 00 00 00 	movl   $0xf,-0xc(%ebp)
	//sem_wait(mutex);
	while(i--) {
 80489b6:	eb 40                	jmp    80489f8 <fun3+0x4f>
		printf("hello,I'm fun3\n");
 80489b8:	83 ec 0c             	sub    $0xc,%esp
 80489bb:	68 56 96 04 08       	push   $0x8049656
 80489c0:	e8 ab fd ff ff       	call   8048770 <puts@plt>
 80489c5:	83 c4 10             	add    $0x10,%esp
	abt++;
 80489c8:	a1 68 b0 04 08       	mov    0x804b068,%eax
 80489cd:	83 c0 01             	add    $0x1,%eax
 80489d0:	a3 68 b0 04 08       	mov    %eax,0x804b068
		printf("a = %d\n",abt);
 80489d5:	a1 68 b0 04 08       	mov    0x804b068,%eax
 80489da:	83 ec 08             	sub    $0x8,%esp
 80489dd:	50                   	push   %eax
 80489de:	68 3f 96 04 08       	push   $0x804963f
 80489e3:	e8 f8 fc ff ff       	call   80486e0 <printf@plt>
 80489e8:	83 c4 10             	add    $0x10,%esp
		mysleep(1);
 80489eb:	83 ec 0c             	sub    $0xc,%esp
 80489ee:	6a 01                	push   $0x1
 80489f0:	e8 9c 0a 00 00       	call   8049491 <mysleep>
 80489f5:	83 c4 10             	add    $0x10,%esp
}

void *fun3() {
	int i = 15;
	//sem_wait(mutex);
	while(i--) {
 80489f8:	8b 45 f4             	mov    -0xc(%ebp),%eax
 80489fb:	8d 50 ff             	lea    -0x1(%eax),%edx
 80489fe:	89 55 f4             	mov    %edx,-0xc(%ebp)
 8048a01:	85 c0                	test   %eax,%eax
 8048a03:	75 b3                	jne    80489b8 <fun3+0xf>
	abt++;
		printf("a = %d\n",abt);
		mysleep(1);
	}
	//sem_post(mutex);
}
 8048a05:	90                   	nop
 8048a06:	c9                   	leave  
 8048a07:	c3                   	ret    

08048a08 <fun4>:

void *fun4() {
 8048a08:	55                   	push   %ebp
 8048a09:	89 e5                	mov    %esp,%ebp
 8048a0b:	83 ec 18             	sub    $0x18,%esp
	int i = 15;
 8048a0e:	c7 45 ec 0f 00 00 00 	movl   $0xf,-0x14(%ebp)
	int m,n;
	//sem_wait(mutex);
	while(i--) {
 8048a15:	eb 5f                	jmp    8048a76 <fun4+0x6e>
		printf("hello,I'm fun4\n");
 8048a17:	83 ec 0c             	sub    $0xc,%esp
 8048a1a:	68 65 96 04 08       	push   $0x8049665
 8048a1f:	e8 4c fd ff ff       	call   8048770 <puts@plt>
 8048a24:	83 c4 10             	add    $0x10,%esp
	abt++;
 8048a27:	a1 68 b0 04 08       	mov    0x804b068,%eax
 8048a2c:	83 c0 01             	add    $0x1,%eax
 8048a2f:	a3 68 b0 04 08       	mov    %eax,0x804b068
		printf("a = %d\n",abt);
 8048a34:	a1 68 b0 04 08       	mov    0x804b068,%eax
 8048a39:	83 ec 08             	sub    $0x8,%esp
 8048a3c:	50                   	push   %eax
 8048a3d:	68 3f 96 04 08       	push   $0x804963f
 8048a42:	e8 99 fc ff ff       	call   80486e0 <printf@plt>
 8048a47:	83 c4 10             	add    $0x10,%esp
		for(m = 0; m < 10000; m++) 
 8048a4a:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
 8048a51:	eb 1a                	jmp    8048a6d <fun4+0x65>
		  for(n = 0; n < 10000; n++);
 8048a53:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
 8048a5a:	eb 04                	jmp    8048a60 <fun4+0x58>
 8048a5c:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
 8048a60:	81 7d f4 0f 27 00 00 	cmpl   $0x270f,-0xc(%ebp)
 8048a67:	7e f3                	jle    8048a5c <fun4+0x54>
	//sem_wait(mutex);
	while(i--) {
		printf("hello,I'm fun4\n");
	abt++;
		printf("a = %d\n",abt);
		for(m = 0; m < 10000; m++) 
 8048a69:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
 8048a6d:	81 7d f0 0f 27 00 00 	cmpl   $0x270f,-0x10(%ebp)
 8048a74:	7e dd                	jle    8048a53 <fun4+0x4b>

void *fun4() {
	int i = 15;
	int m,n;
	//sem_wait(mutex);
	while(i--) {
 8048a76:	8b 45 ec             	mov    -0x14(%ebp),%eax
 8048a79:	8d 50 ff             	lea    -0x1(%eax),%edx
 8048a7c:	89 55 ec             	mov    %edx,-0x14(%ebp)
 8048a7f:	85 c0                	test   %eax,%eax
 8048a81:	75 94                	jne    8048a17 <fun4+0xf>
		printf("a = %d\n",abt);
		for(m = 0; m < 10000; m++) 
		  for(n = 0; n < 10000; n++);
	}
	//sem_post(mutex);
}
 8048a83:	90                   	nop
 8048a84:	c9                   	leave  
 8048a85:	c3                   	ret    

08048a86 <main>:

int main()
{
 8048a86:	8d 4c 24 04          	lea    0x4(%esp),%ecx
 8048a8a:	83 e4 f0             	and    $0xfffffff0,%esp
 8048a8d:	ff 71 fc             	pushl  -0x4(%ecx)
 8048a90:	55                   	push   %ebp
 8048a91:	89 e5                	mov    %esp,%ebp
 8048a93:	51                   	push   %ecx
 8048a94:	83 ec 44             	sub    $0x44,%esp
 8048a97:	65 a1 14 00 00 00    	mov    %gs:0x14,%eax
 8048a9d:	89 45 f4             	mov    %eax,-0xc(%ebp)
 8048aa0:	31 c0                	xor    %eax,%eax
	pthread_t pro,con1,con2;
	pthread_attr_t attr;
	int p = 1;
 8048aa2:	c7 45 cc 01 00 00 00 	movl   $0x1,-0x34(%ebp)
	pthread_attr_init(&attr);
 8048aa9:	83 ec 0c             	sub    $0xc,%esp
 8048aac:	8d 45 d0             	lea    -0x30(%ebp),%eax
 8048aaf:	50                   	push   %eax
 8048ab0:	e8 0b fc ff ff       	call   80486c0 <pthread_attr_init@plt>
 8048ab5:	83 c4 10             	add    $0x10,%esp
	pthread_create(&pro,&attr,&fun1,&p);
 8048ab8:	8d 45 cc             	lea    -0x34(%ebp),%eax
 8048abb:	50                   	push   %eax
 8048abc:	68 eb 88 04 08       	push   $0x80488eb
 8048ac1:	8d 45 d0             	lea    -0x30(%ebp),%eax
 8048ac4:	50                   	push   %eax
 8048ac5:	8d 45 c0             	lea    -0x40(%ebp),%eax
 8048ac8:	50                   	push   %eax
 8048ac9:	e8 02 fd ff ff       	call   80487d0 <pthread_create@plt>
 8048ace:	83 c4 10             	add    $0x10,%esp
	pthread_create(&con1,&attr,&fun2,&con1);
 8048ad1:	8d 45 c4             	lea    -0x3c(%ebp),%eax
 8048ad4:	50                   	push   %eax
 8048ad5:	68 4a 89 04 08       	push   $0x804894a
 8048ada:	8d 45 d0             	lea    -0x30(%ebp),%eax
 8048add:	50                   	push   %eax
 8048ade:	8d 45 c4             	lea    -0x3c(%ebp),%eax
 8048ae1:	50                   	push   %eax
 8048ae2:	e8 e9 fc ff ff       	call   80487d0 <pthread_create@plt>
 8048ae7:	83 c4 10             	add    $0x10,%esp
	pthread_create(&con2,&attr,&fun3,&con2);
 8048aea:	8d 45 c8             	lea    -0x38(%ebp),%eax
 8048aed:	50                   	push   %eax
 8048aee:	68 a9 89 04 08       	push   $0x80489a9
 8048af3:	8d 45 d0             	lea    -0x30(%ebp),%eax
 8048af6:	50                   	push   %eax
 8048af7:	8d 45 c8             	lea    -0x38(%ebp),%eax
 8048afa:	50                   	push   %eax
 8048afb:	e8 d0 fc ff ff       	call   80487d0 <pthread_create@plt>
 8048b00:	83 c4 10             	add    $0x10,%esp

	mutex = sem_open("mutex",1);
 8048b03:	83 ec 08             	sub    $0x8,%esp
 8048b06:	6a 01                	push   $0x1
 8048b08:	68 74 96 04 08       	push   $0x8049674
 8048b0d:	e8 2a 02 00 00       	call   8048d3c <sem_open>
 8048b12:	83 c4 10             	add    $0x10,%esp
 8048b15:	a3 e4 c0 04 08       	mov    %eax,0x804c0e4
	pthread_join(pro,NULL);	
 8048b1a:	8b 45 c0             	mov    -0x40(%ebp),%eax
 8048b1d:	83 ec 08             	sub    $0x8,%esp
 8048b20:	6a 00                	push   $0x0
 8048b22:	50                   	push   %eax
 8048b23:	e8 98 fc ff ff       	call   80487c0 <pthread_join@plt>
 8048b28:	83 c4 10             	add    $0x10,%esp
	pthread_join(con1,NULL);	
 8048b2b:	8b 45 c4             	mov    -0x3c(%ebp),%eax
 8048b2e:	83 ec 08             	sub    $0x8,%esp
 8048b31:	6a 00                	push   $0x0
 8048b33:	50                   	push   %eax
 8048b34:	e8 87 fc ff ff       	call   80487c0 <pthread_join@plt>
 8048b39:	83 c4 10             	add    $0x10,%esp
	pthread_join(con2,NULL);	
 8048b3c:	8b 45 c8             	mov    -0x38(%ebp),%eax
 8048b3f:	83 ec 08             	sub    $0x8,%esp
 8048b42:	6a 00                	push   $0x0
 8048b44:	50                   	push   %eax
 8048b45:	e8 76 fc ff ff       	call   80487c0 <pthread_join@plt>
 8048b4a:	83 c4 10             	add    $0x10,%esp
	sem_unlink("mutex");
 8048b4d:	83 ec 0c             	sub    $0xc,%esp
 8048b50:	68 74 96 04 08       	push   $0x8049674
 8048b55:	e8 b4 03 00 00       	call   8048f0e <sem_unlink>
 8048b5a:	83 c4 10             	add    $0x10,%esp
	return 0;
 8048b5d:	b8 00 00 00 00       	mov    $0x0,%eax
}
 8048b62:	8b 55 f4             	mov    -0xc(%ebp),%edx
 8048b65:	65 33 15 14 00 00 00 	xor    %gs:0x14,%edx
 8048b6c:	74 05                	je     8048b73 <main+0xed>
 8048b6e:	e8 bd fb ff ff       	call   8048730 <__stack_chk_fail@plt>
 8048b73:	8b 4d fc             	mov    -0x4(%ebp),%ecx
 8048b76:	c9                   	leave  
 8048b77:	8d 61 fc             	lea    -0x4(%ecx),%esp
 8048b7a:	c3                   	ret    

08048b7b <atomic_add>:
   * Add to the atomic variable
    * @param i integer value to add
	 * @param v pointer of type atomic_t
	  */
static inline void atomic_add( int i, atomic_t *v )
{
 8048b7b:	55                   	push   %ebp
 8048b7c:	89 e5                	mov    %esp,%ebp
		(void)__sync_add_and_fetch(&v->counter, i);
 8048b7e:	8b 55 08             	mov    0x8(%ebp),%edx
 8048b81:	8b 45 0c             	mov    0xc(%ebp),%eax
 8048b84:	f0 01 10             	lock add %edx,(%eax)
}
 8048b87:	90                   	nop
 8048b88:	5d                   	pop    %ebp
 8048b89:	c3                   	ret    

08048b8a <atomic_sub>:
	 * @param v pointer of type atomic_t
	  *
	   * Atomically subtracts @i from @v.
	    */
static inline void atomic_sub( int i, atomic_t *v )
{
 8048b8a:	55                   	push   %ebp
 8048b8b:	89 e5                	mov    %esp,%ebp
		(void)__sync_sub_and_fetch(&v->counter, i);
 8048b8d:	8b 55 08             	mov    0x8(%ebp),%edx
 8048b90:	8b 45 0c             	mov    0xc(%ebp),%eax
 8048b93:	f0 29 10             	lock sub %edx,(%eax)
}
 8048b96:	90                   	nop
 8048b97:	5d                   	pop    %ebp
 8048b98:	c3                   	ret    

08048b99 <init_queue>:
#define SEM_COUNT 32

sem_t* semaphores[SEM_COUNT];

//队列相关的操作
void init_queue(sem_queue *q) {
 8048b99:	55                   	push   %ebp
 8048b9a:	89 e5                	mov    %esp,%ebp
	q->front = q->rear = 0;
 8048b9c:	8b 45 08             	mov    0x8(%ebp),%eax
 8048b9f:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
 8048ba6:	8b 45 08             	mov    0x8(%ebp),%eax
 8048ba9:	8b 50 04             	mov    0x4(%eax),%edx
 8048bac:	8b 45 08             	mov    0x8(%ebp),%eax
 8048baf:	89 10                	mov    %edx,(%eax)
}
 8048bb1:	90                   	nop
 8048bb2:	5d                   	pop    %ebp
 8048bb3:	c3                   	ret    

08048bb4 <is_empty>:

int is_empty(sem_queue *q) {
 8048bb4:	55                   	push   %ebp
 8048bb5:	89 e5                	mov    %esp,%ebp
	return q->front == q->rear ? 1 : 0;
 8048bb7:	8b 45 08             	mov    0x8(%ebp),%eax
 8048bba:	8b 10                	mov    (%eax),%edx
 8048bbc:	8b 45 08             	mov    0x8(%ebp),%eax
 8048bbf:	8b 40 04             	mov    0x4(%eax),%eax
 8048bc2:	39 c2                	cmp    %eax,%edx
 8048bc4:	0f 94 c0             	sete   %al
 8048bc7:	0f b6 c0             	movzbl %al,%eax
}
 8048bca:	5d                   	pop    %ebp
 8048bcb:	c3                   	ret    

08048bcc <is_full>:

int is_full(sem_queue *q) {
 8048bcc:	55                   	push   %ebp
 8048bcd:	89 e5                	mov    %esp,%ebp
	return (q->rear + 1) % QUE_LEN == q->front ? 1 : 0; 
 8048bcf:	8b 45 08             	mov    0x8(%ebp),%eax
 8048bd2:	8b 40 04             	mov    0x4(%eax),%eax
 8048bd5:	8d 50 01             	lea    0x1(%eax),%edx
 8048bd8:	89 d0                	mov    %edx,%eax
 8048bda:	c1 f8 1f             	sar    $0x1f,%eax
 8048bdd:	c1 e8 1c             	shr    $0x1c,%eax
 8048be0:	01 c2                	add    %eax,%edx
 8048be2:	83 e2 0f             	and    $0xf,%edx
 8048be5:	29 c2                	sub    %eax,%edx
 8048be7:	89 d0                	mov    %edx,%eax
 8048be9:	89 c2                	mov    %eax,%edx
 8048beb:	8b 45 08             	mov    0x8(%ebp),%eax
 8048bee:	8b 00                	mov    (%eax),%eax
 8048bf0:	39 c2                	cmp    %eax,%edx
 8048bf2:	0f 94 c0             	sete   %al
 8048bf5:	0f b6 c0             	movzbl %al,%eax
}
 8048bf8:	5d                   	pop    %ebp
 8048bf9:	c3                   	ret    

08048bfa <get_task>:

//获得队列头的第一个任务
struct task_struct* get_task(sem_queue *q) {
 8048bfa:	55                   	push   %ebp
 8048bfb:	89 e5                	mov    %esp,%ebp
 8048bfd:	83 ec 18             	sub    $0x18,%esp
	if(is_empty(q)) {
 8048c00:	ff 75 08             	pushl  0x8(%ebp)
 8048c03:	e8 ac ff ff ff       	call   8048bb4 <is_empty>
 8048c08:	83 c4 04             	add    $0x4,%esp
 8048c0b:	85 c0                	test   %eax,%eax
 8048c0d:	74 17                	je     8048c26 <get_task+0x2c>
		printf("Queue is empty\n");
 8048c0f:	83 ec 0c             	sub    $0xc,%esp
 8048c12:	68 7c 96 04 08       	push   $0x804967c
 8048c17:	e8 54 fb ff ff       	call   8048770 <puts@plt>
 8048c1c:	83 c4 10             	add    $0x10,%esp
		return NULL;
 8048c1f:	b8 00 00 00 00       	mov    $0x0,%eax
 8048c24:	eb 32                	jmp    8048c58 <get_task+0x5e>
	}

	struct task_struct* tsk = q->wait_tasks[q->front];
 8048c26:	8b 45 08             	mov    0x8(%ebp),%eax
 8048c29:	8b 10                	mov    (%eax),%edx
 8048c2b:	8b 45 08             	mov    0x8(%ebp),%eax
 8048c2e:	8b 44 90 08          	mov    0x8(%eax,%edx,4),%eax
 8048c32:	89 45 f4             	mov    %eax,-0xc(%ebp)
	q->front = (q->front + 1) % QUE_LEN;
 8048c35:	8b 45 08             	mov    0x8(%ebp),%eax
 8048c38:	8b 00                	mov    (%eax),%eax
 8048c3a:	8d 50 01             	lea    0x1(%eax),%edx
 8048c3d:	89 d0                	mov    %edx,%eax
 8048c3f:	c1 f8 1f             	sar    $0x1f,%eax
 8048c42:	c1 e8 1c             	shr    $0x1c,%eax
 8048c45:	01 c2                	add    %eax,%edx
 8048c47:	83 e2 0f             	and    $0xf,%edx
 8048c4a:	29 c2                	sub    %eax,%edx
 8048c4c:	89 d0                	mov    %edx,%eax
 8048c4e:	89 c2                	mov    %eax,%edx
 8048c50:	8b 45 08             	mov    0x8(%ebp),%eax
 8048c53:	89 10                	mov    %edx,(%eax)
	return tsk;
 8048c55:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
 8048c58:	c9                   	leave  
 8048c59:	c3                   	ret    

08048c5a <insert_task>:

//将线程插入队尾
int insert_task(struct task_struct* p,sem_t* sem) {
 8048c5a:	55                   	push   %ebp
 8048c5b:	89 e5                	mov    %esp,%ebp
 8048c5d:	83 ec 18             	sub    $0x18,%esp
	sem_queue *q = &sem->wait_queue;
 8048c60:	8b 45 0c             	mov    0xc(%ebp),%eax
 8048c63:	83 c0 14             	add    $0x14,%eax
 8048c66:	89 45 f4             	mov    %eax,-0xc(%ebp)
	printf("thread %d insert to %s\n",p->id,sem->name);
 8048c69:	8b 45 0c             	mov    0xc(%ebp),%eax
 8048c6c:	8d 50 04             	lea    0x4(%eax),%edx
 8048c6f:	8b 45 08             	mov    0x8(%ebp),%eax
 8048c72:	8b 00                	mov    (%eax),%eax
 8048c74:	83 ec 04             	sub    $0x4,%esp
 8048c77:	52                   	push   %edx
 8048c78:	50                   	push   %eax
 8048c79:	68 8b 96 04 08       	push   $0x804968b
 8048c7e:	e8 5d fa ff ff       	call   80486e0 <printf@plt>
 8048c83:	83 c4 10             	add    $0x10,%esp
	if(is_full(q)) {
 8048c86:	83 ec 0c             	sub    $0xc,%esp
 8048c89:	ff 75 f4             	pushl  -0xc(%ebp)
 8048c8c:	e8 3b ff ff ff       	call   8048bcc <is_full>
 8048c91:	83 c4 10             	add    $0x10,%esp
 8048c94:	85 c0                	test   %eax,%eax
 8048c96:	74 17                	je     8048caf <insert_task+0x55>
		printf("Queue is full\n");
 8048c98:	83 ec 0c             	sub    $0xc,%esp
 8048c9b:	68 a3 96 04 08       	push   $0x80496a3
 8048ca0:	e8 cb fa ff ff       	call   8048770 <puts@plt>
 8048ca5:	83 c4 10             	add    $0x10,%esp
		return -1;
 8048ca8:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 8048cad:	eb 37                	jmp    8048ce6 <insert_task+0x8c>
	}
	q->wait_tasks[q->rear] = p;
 8048caf:	8b 45 f4             	mov    -0xc(%ebp),%eax
 8048cb2:	8b 50 04             	mov    0x4(%eax),%edx
 8048cb5:	8b 45 f4             	mov    -0xc(%ebp),%eax
 8048cb8:	8b 4d 08             	mov    0x8(%ebp),%ecx
 8048cbb:	89 4c 90 08          	mov    %ecx,0x8(%eax,%edx,4)
	q->rear = (q->rear + 1) % QUE_LEN;
 8048cbf:	8b 45 f4             	mov    -0xc(%ebp),%eax
 8048cc2:	8b 40 04             	mov    0x4(%eax),%eax
 8048cc5:	8d 50 01             	lea    0x1(%eax),%edx
 8048cc8:	89 d0                	mov    %edx,%eax
 8048cca:	c1 f8 1f             	sar    $0x1f,%eax
 8048ccd:	c1 e8 1c             	shr    $0x1c,%eax
 8048cd0:	01 c2                	add    %eax,%edx
 8048cd2:	83 e2 0f             	and    $0xf,%edx
 8048cd5:	29 c2                	sub    %eax,%edx
 8048cd7:	89 d0                	mov    %edx,%eax
 8048cd9:	89 c2                	mov    %eax,%edx
 8048cdb:	8b 45 f4             	mov    -0xc(%ebp),%eax
 8048cde:	89 50 04             	mov    %edx,0x4(%eax)
	return 1;
 8048ce1:	b8 01 00 00 00       	mov    $0x1,%eax
}
 8048ce6:	c9                   	leave  
 8048ce7:	c3                   	ret    

08048ce8 <sem_location>:

//检查是否存在信号量，是则返回位置
int sem_location(const char* name) {
 8048ce8:	55                   	push   %ebp
 8048ce9:	89 e5                	mov    %esp,%ebp
 8048ceb:	83 ec 18             	sub    $0x18,%esp
	int i;
	for(i = 0; i < SEM_COUNT; ++i) {
 8048cee:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
 8048cf5:	eb 38                	jmp    8048d2f <sem_location+0x47>
		if(semaphores[i] == NULL) continue;
 8048cf7:	8b 45 f4             	mov    -0xc(%ebp),%eax
 8048cfa:	8b 04 85 00 c1 04 08 	mov    0x804c100(,%eax,4),%eax
 8048d01:	85 c0                	test   %eax,%eax
 8048d03:	74 25                	je     8048d2a <sem_location+0x42>
		if(strcmp(name,semaphores[i]->name) == 0)
 8048d05:	8b 45 f4             	mov    -0xc(%ebp),%eax
 8048d08:	8b 04 85 00 c1 04 08 	mov    0x804c100(,%eax,4),%eax
 8048d0f:	83 c0 04             	add    $0x4,%eax
 8048d12:	83 ec 08             	sub    $0x8,%esp
 8048d15:	50                   	push   %eax
 8048d16:	ff 75 08             	pushl  0x8(%ebp)
 8048d19:	e8 b2 f9 ff ff       	call   80486d0 <strcmp@plt>
 8048d1e:	83 c4 10             	add    $0x10,%esp
 8048d21:	85 c0                	test   %eax,%eax
 8048d23:	75 06                	jne    8048d2b <sem_location+0x43>
		  return i;
 8048d25:	8b 45 f4             	mov    -0xc(%ebp),%eax
 8048d28:	eb 10                	jmp    8048d3a <sem_location+0x52>

//检查是否存在信号量，是则返回位置
int sem_location(const char* name) {
	int i;
	for(i = 0; i < SEM_COUNT; ++i) {
		if(semaphores[i] == NULL) continue;
 8048d2a:	90                   	nop
}

//检查是否存在信号量，是则返回位置
int sem_location(const char* name) {
	int i;
	for(i = 0; i < SEM_COUNT; ++i) {
 8048d2b:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
 8048d2f:	83 7d f4 1f          	cmpl   $0x1f,-0xc(%ebp)
 8048d33:	7e c2                	jle    8048cf7 <sem_location+0xf>
		if(semaphores[i] == NULL) continue;
		if(strcmp(name,semaphores[i]->name) == 0)
		  return i;
	}
	
	return -1;
 8048d35:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
 8048d3a:	c9                   	leave  
 8048d3b:	c3                   	ret    

08048d3c <sem_open>:

//打开信号量
sem_t* sem_open(const char* name,unsigned int value) {
 8048d3c:	55                   	push   %ebp
 8048d3d:	89 e5                	mov    %esp,%ebp
 8048d3f:	83 ec 38             	sub    $0x38,%esp
 8048d42:	8b 45 08             	mov    0x8(%ebp),%eax
 8048d45:	89 45 d4             	mov    %eax,-0x2c(%ebp)
 8048d48:	65 a1 14 00 00 00    	mov    %gs:0x14,%eax
 8048d4e:	89 45 f4             	mov    %eax,-0xc(%ebp)
 8048d51:	31 c0                	xor    %eax,%eax
	
	char tmp[16];
	char c;
	int i;
	for(i = 0; i < 16; i++) {
 8048d53:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
 8048d5a:	eb 26                	jmp    8048d82 <sem_open+0x46>
		c= name[i];
 8048d5c:	8b 55 dc             	mov    -0x24(%ebp),%edx
 8048d5f:	8b 45 d4             	mov    -0x2c(%ebp),%eax
 8048d62:	01 d0                	add    %edx,%eax
 8048d64:	0f b6 00             	movzbl (%eax),%eax
 8048d67:	88 45 db             	mov    %al,-0x25(%ebp)
		tmp[i] = c;
 8048d6a:	8d 55 e4             	lea    -0x1c(%ebp),%edx
 8048d6d:	8b 45 dc             	mov    -0x24(%ebp),%eax
 8048d70:	01 c2                	add    %eax,%edx
 8048d72:	0f b6 45 db          	movzbl -0x25(%ebp),%eax
 8048d76:	88 02                	mov    %al,(%edx)
		if(c == '\0') break;
 8048d78:	80 7d db 00          	cmpb   $0x0,-0x25(%ebp)
 8048d7c:	74 0c                	je     8048d8a <sem_open+0x4e>
sem_t* sem_open(const char* name,unsigned int value) {
	
	char tmp[16];
	char c;
	int i;
	for(i = 0; i < 16; i++) {
 8048d7e:	83 45 dc 01          	addl   $0x1,-0x24(%ebp)
 8048d82:	83 7d dc 0f          	cmpl   $0xf,-0x24(%ebp)
 8048d86:	7e d4                	jle    8048d5c <sem_open+0x20>
 8048d88:	eb 01                	jmp    8048d8b <sem_open+0x4f>
		c= name[i];
		tmp[i] = c;
		if(c == '\0') break;
 8048d8a:	90                   	nop
	}
	
	if(c >= 16) {
 8048d8b:	80 7d db 0f          	cmpb   $0xf,-0x25(%ebp)
 8048d8f:	7e 1a                	jle    8048dab <sem_open+0x6f>
		printf("Semaphore name is too long\n");
 8048d91:	83 ec 0c             	sub    $0xc,%esp
 8048d94:	68 b1 96 04 08       	push   $0x80496b1
 8048d99:	e8 d2 f9 ff ff       	call   8048770 <puts@plt>
 8048d9e:	83 c4 10             	add    $0x10,%esp
		return NULL;
 8048da1:	b8 00 00 00 00       	mov    $0x0,%eax
 8048da6:	e9 b6 00 00 00       	jmp    8048e61 <sem_open+0x125>
	}

	if((i = sem_location(tmp)) != -1) {
 8048dab:	83 ec 0c             	sub    $0xc,%esp
 8048dae:	8d 45 e4             	lea    -0x1c(%ebp),%eax
 8048db1:	50                   	push   %eax
 8048db2:	e8 31 ff ff ff       	call   8048ce8 <sem_location>
 8048db7:	83 c4 10             	add    $0x10,%esp
 8048dba:	89 45 dc             	mov    %eax,-0x24(%ebp)
 8048dbd:	83 7d dc ff          	cmpl   $0xffffffff,-0x24(%ebp)
 8048dc1:	74 0f                	je     8048dd2 <sem_open+0x96>
		return semaphores[i];
 8048dc3:	8b 45 dc             	mov    -0x24(%ebp),%eax
 8048dc6:	8b 04 85 00 c1 04 08 	mov    0x804c100(,%eax,4),%eax
 8048dcd:	e9 8f 00 00 00       	jmp    8048e61 <sem_open+0x125>
	}
	
	sem_t* sem = (sem_t*)malloc(sizeof(sem_t));
 8048dd2:	83 ec 0c             	sub    $0xc,%esp
 8048dd5:	6a 5c                	push   $0x5c
 8048dd7:	e8 84 f9 ff ff       	call   8048760 <malloc@plt>
 8048ddc:	83 c4 10             	add    $0x10,%esp
 8048ddf:	89 45 e0             	mov    %eax,-0x20(%ebp)
	atomic_set(&sem->value,value);
 8048de2:	8b 55 0c             	mov    0xc(%ebp),%edx
 8048de5:	8b 45 e0             	mov    -0x20(%ebp),%eax
 8048de8:	89 10                	mov    %edx,(%eax)
	strcpy(sem->name,tmp);
 8048dea:	8b 45 e0             	mov    -0x20(%ebp),%eax
 8048ded:	8d 50 04             	lea    0x4(%eax),%edx
 8048df0:	83 ec 08             	sub    $0x8,%esp
 8048df3:	8d 45 e4             	lea    -0x1c(%ebp),%eax
 8048df6:	50                   	push   %eax
 8048df7:	52                   	push   %edx
 8048df8:	e8 53 f9 ff ff       	call   8048750 <strcpy@plt>
 8048dfd:	83 c4 10             	add    $0x10,%esp
	init_queue(&sem->wait_queue);
 8048e00:	8b 45 e0             	mov    -0x20(%ebp),%eax
 8048e03:	83 c0 14             	add    $0x14,%eax
 8048e06:	83 ec 0c             	sub    $0xc,%esp
 8048e09:	50                   	push   %eax
 8048e0a:	e8 8a fd ff ff       	call   8048b99 <init_queue>
 8048e0f:	83 c4 10             	add    $0x10,%esp
	for(i = 0; i < SEM_COUNT; ++i) {
 8048e12:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
 8048e19:	eb 2b                	jmp    8048e46 <sem_open+0x10a>
		if(semaphores[i] == NULL) {
 8048e1b:	8b 45 dc             	mov    -0x24(%ebp),%eax
 8048e1e:	8b 04 85 00 c1 04 08 	mov    0x804c100(,%eax,4),%eax
 8048e25:	85 c0                	test   %eax,%eax
 8048e27:	75 19                	jne    8048e42 <sem_open+0x106>
			semaphores[i] = sem;
 8048e29:	8b 45 dc             	mov    -0x24(%ebp),%eax
 8048e2c:	8b 55 e0             	mov    -0x20(%ebp),%edx
 8048e2f:	89 14 85 00 c1 04 08 	mov    %edx,0x804c100(,%eax,4)
			return semaphores[i];
 8048e36:	8b 45 dc             	mov    -0x24(%ebp),%eax
 8048e39:	8b 04 85 00 c1 04 08 	mov    0x804c100(,%eax,4),%eax
 8048e40:	eb 1f                	jmp    8048e61 <sem_open+0x125>
	
	sem_t* sem = (sem_t*)malloc(sizeof(sem_t));
	atomic_set(&sem->value,value);
	strcpy(sem->name,tmp);
	init_queue(&sem->wait_queue);
	for(i = 0; i < SEM_COUNT; ++i) {
 8048e42:	83 45 dc 01          	addl   $0x1,-0x24(%ebp)
 8048e46:	83 7d dc 1f          	cmpl   $0x1f,-0x24(%ebp)
 8048e4a:	7e cf                	jle    8048e1b <sem_open+0xdf>
			semaphores[i] = sem;
			return semaphores[i];
		}
	}
	
	printf("Number of semaphores are limited\n");
 8048e4c:	83 ec 0c             	sub    $0xc,%esp
 8048e4f:	68 cc 96 04 08       	push   $0x80496cc
 8048e54:	e8 17 f9 ff ff       	call   8048770 <puts@plt>
 8048e59:	83 c4 10             	add    $0x10,%esp
	return NULL;
 8048e5c:	b8 00 00 00 00       	mov    $0x0,%eax
}
 8048e61:	8b 4d f4             	mov    -0xc(%ebp),%ecx
 8048e64:	65 33 0d 14 00 00 00 	xor    %gs:0x14,%ecx
 8048e6b:	74 05                	je     8048e72 <sem_open+0x136>
 8048e6d:	e8 be f8 ff ff       	call   8048730 <__stack_chk_fail@plt>
 8048e72:	c9                   	leave  
 8048e73:	c3                   	ret    

08048e74 <sem_wait>:

//P操作
int sem_wait(sem_t* sem) {
 8048e74:	55                   	push   %ebp
 8048e75:	89 e5                	mov    %esp,%ebp
 8048e77:	83 ec 08             	sub    $0x8,%esp
	atomic_sub(1,&sem->value);
 8048e7a:	8b 45 08             	mov    0x8(%ebp),%eax
 8048e7d:	50                   	push   %eax
 8048e7e:	6a 01                	push   $0x1
 8048e80:	e8 05 fd ff ff       	call   8048b8a <atomic_sub>
 8048e85:	83 c4 08             	add    $0x8,%esp
	
	//0 - 1 = -1,资源不足,睡眠
	if(atomic_read(&sem->value) < 0) {
 8048e88:	8b 45 08             	mov    0x8(%ebp),%eax
 8048e8b:	8b 00                	mov    (%eax),%eax
 8048e8d:	85 c0                	test   %eax,%eax
 8048e8f:	79 2d                	jns    8048ebe <sem_wait+0x4a>
		current->status = THREAD_UNINTERRUPTIBLE;
 8048e91:	a1 9c c0 04 08       	mov    0x804c09c,%eax
 8048e96:	c7 40 10 04 00 00 00 	movl   $0x4,0x10(%eax)
		insert_task(current,sem);
 8048e9d:	a1 9c c0 04 08       	mov    0x804c09c,%eax
 8048ea2:	83 ec 08             	sub    $0x8,%esp
 8048ea5:	ff 75 08             	pushl  0x8(%ebp)
 8048ea8:	50                   	push   %eax
 8048ea9:	e8 ac fd ff ff       	call   8048c5a <insert_task>
 8048eae:	83 c4 10             	add    $0x10,%esp
		mysleep(1);
 8048eb1:	83 ec 0c             	sub    $0xc,%esp
 8048eb4:	6a 01                	push   $0x1
 8048eb6:	e8 d6 05 00 00       	call   8049491 <mysleep>
 8048ebb:	83 c4 10             	add    $0x10,%esp
	}

	return 0;
 8048ebe:	b8 00 00 00 00       	mov    $0x0,%eax
}
 8048ec3:	c9                   	leave  
 8048ec4:	c3                   	ret    

08048ec5 <sem_post>:

//V操作
int sem_post(sem_t* sem) {
 8048ec5:	55                   	push   %ebp
 8048ec6:	89 e5                	mov    %esp,%ebp
 8048ec8:	83 ec 18             	sub    $0x18,%esp
	
	atomic_add(1,&sem->value);
 8048ecb:	8b 45 08             	mov    0x8(%ebp),%eax
 8048ece:	50                   	push   %eax
 8048ecf:	6a 01                	push   $0x1
 8048ed1:	e8 a5 fc ff ff       	call   8048b7b <atomic_add>
 8048ed6:	83 c4 08             	add    $0x8,%esp
	if(atomic_read(&sem->value) <= 0) {
 8048ed9:	8b 45 08             	mov    0x8(%ebp),%eax
 8048edc:	8b 00                	mov    (%eax),%eax
 8048ede:	85 c0                	test   %eax,%eax
 8048ee0:	7f 25                	jg     8048f07 <sem_post+0x42>
		struct task_struct* p = get_task(&sem->wait_queue);
 8048ee2:	8b 45 08             	mov    0x8(%ebp),%eax
 8048ee5:	83 c0 14             	add    $0x14,%eax
 8048ee8:	83 ec 0c             	sub    $0xc,%esp
 8048eeb:	50                   	push   %eax
 8048eec:	e8 09 fd ff ff       	call   8048bfa <get_task>
 8048ef1:	83 c4 10             	add    $0x10,%esp
 8048ef4:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if(p != NULL) p->status = THREAD_RUNNING;
 8048ef7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
 8048efb:	74 0a                	je     8048f07 <sem_post+0x42>
 8048efd:	8b 45 f4             	mov    -0xc(%ebp),%eax
 8048f00:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)
	}
	return 0;
 8048f07:	b8 00 00 00 00       	mov    $0x0,%eax
}
 8048f0c:	c9                   	leave  
 8048f0d:	c3                   	ret    

08048f0e <sem_unlink>:

int sem_unlink(const char* name) {
 8048f0e:	55                   	push   %ebp
 8048f0f:	89 e5                	mov    %esp,%ebp
 8048f11:	83 ec 38             	sub    $0x38,%esp
 8048f14:	8b 45 08             	mov    0x8(%ebp),%eax
 8048f17:	89 45 d4             	mov    %eax,-0x2c(%ebp)
 8048f1a:	65 a1 14 00 00 00    	mov    %gs:0x14,%eax
 8048f20:	89 45 f4             	mov    %eax,-0xc(%ebp)
 8048f23:	31 c0                	xor    %eax,%eax
	
	char tmp[16];
	char c;
	int i,ret;
	for(i = 0; i < 16; i++) {
 8048f25:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
 8048f2c:	eb 26                	jmp    8048f54 <sem_unlink+0x46>
		c= name[i];
 8048f2e:	8b 55 dc             	mov    -0x24(%ebp),%edx
 8048f31:	8b 45 d4             	mov    -0x2c(%ebp),%eax
 8048f34:	01 d0                	add    %edx,%eax
 8048f36:	0f b6 00             	movzbl (%eax),%eax
 8048f39:	88 45 db             	mov    %al,-0x25(%ebp)
		tmp[i] = c;
 8048f3c:	8d 55 e4             	lea    -0x1c(%ebp),%edx
 8048f3f:	8b 45 dc             	mov    -0x24(%ebp),%eax
 8048f42:	01 c2                	add    %eax,%edx
 8048f44:	0f b6 45 db          	movzbl -0x25(%ebp),%eax
 8048f48:	88 02                	mov    %al,(%edx)
		if(c == '\0') break;
 8048f4a:	80 7d db 00          	cmpb   $0x0,-0x25(%ebp)
 8048f4e:	74 0c                	je     8048f5c <sem_unlink+0x4e>
int sem_unlink(const char* name) {
	
	char tmp[16];
	char c;
	int i,ret;
	for(i = 0; i < 16; i++) {
 8048f50:	83 45 dc 01          	addl   $0x1,-0x24(%ebp)
 8048f54:	83 7d dc 0f          	cmpl   $0xf,-0x24(%ebp)
 8048f58:	7e d4                	jle    8048f2e <sem_unlink+0x20>
 8048f5a:	eb 01                	jmp    8048f5d <sem_unlink+0x4f>
		c= name[i];
		tmp[i] = c;
		if(c == '\0') break;
 8048f5c:	90                   	nop
	}
	
	if(c >= 16) {
 8048f5d:	80 7d db 0f          	cmpb   $0xf,-0x25(%ebp)
 8048f61:	7e 17                	jle    8048f7a <sem_unlink+0x6c>
		printf("Semaphore name is too long\n");
 8048f63:	83 ec 0c             	sub    $0xc,%esp
 8048f66:	68 b1 96 04 08       	push   $0x80496b1
 8048f6b:	e8 00 f8 ff ff       	call   8048770 <puts@plt>
 8048f70:	83 c4 10             	add    $0x10,%esp
		return -1;
 8048f73:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 8048f78:	eb 48                	jmp    8048fc2 <sem_unlink+0xb4>
	}
	
	ret = sem_location(tmp);
 8048f7a:	83 ec 0c             	sub    $0xc,%esp
 8048f7d:	8d 45 e4             	lea    -0x1c(%ebp),%eax
 8048f80:	50                   	push   %eax
 8048f81:	e8 62 fd ff ff       	call   8048ce8 <sem_location>
 8048f86:	83 c4 10             	add    $0x10,%esp
 8048f89:	89 45 e0             	mov    %eax,-0x20(%ebp)
	if(ret != -1) {
 8048f8c:	83 7d e0 ff          	cmpl   $0xffffffff,-0x20(%ebp)
 8048f90:	74 2b                	je     8048fbd <sem_unlink+0xaf>
		free(semaphores[ret]);
 8048f92:	8b 45 e0             	mov    -0x20(%ebp),%eax
 8048f95:	8b 04 85 00 c1 04 08 	mov    0x804c100(,%eax,4),%eax
 8048f9c:	83 ec 0c             	sub    $0xc,%esp
 8048f9f:	50                   	push   %eax
 8048fa0:	e8 5b f7 ff ff       	call   8048700 <free@plt>
 8048fa5:	83 c4 10             	add    $0x10,%esp
		semaphores[ret] = NULL;
 8048fa8:	8b 45 e0             	mov    -0x20(%ebp),%eax
 8048fab:	c7 04 85 00 c1 04 08 	movl   $0x0,0x804c100(,%eax,4)
 8048fb2:	00 00 00 00 
		return 0;
 8048fb6:	b8 00 00 00 00       	mov    $0x0,%eax
 8048fbb:	eb 05                	jmp    8048fc2 <sem_unlink+0xb4>
	}
	return -1;
 8048fbd:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
 8048fc2:	8b 4d f4             	mov    -0xc(%ebp),%ecx
 8048fc5:	65 33 0d 14 00 00 00 	xor    %gs:0x14,%ecx
 8048fcc:	74 05                	je     8048fd3 <sem_unlink+0xc5>
 8048fce:	e8 5d f7 ff ff       	call   8048730 <__stack_chk_fail@plt>
 8048fd3:	c9                   	leave  
 8048fd4:	c3                   	ret    

08048fd5 <gettid>:
void schedule();
static struct task_struct init_task = {0,NULL,THREAD_RUNNING,0,0,15,15,{0}};
struct task_struct *current = &init_task;
struct task_struct *task[NR_TASKS] = {&init_task};

int gettid() {
 8048fd5:	55                   	push   %ebp
 8048fd6:	89 e5                	mov    %esp,%ebp
	return current->id;
 8048fd8:	a1 9c c0 04 08       	mov    0x804c09c,%eax
 8048fdd:	8b 00                	mov    (%eax),%eax
}
 8048fdf:	5d                   	pop    %ebp
 8048fe0:	c3                   	ret    

08048fe1 <start>:
void start(struct task_struct *tsk) {
 8048fe1:	55                   	push   %ebp
 8048fe2:	89 e5                	mov    %esp,%ebp
 8048fe4:	83 ec 08             	sub    $0x8,%esp
	tsk->th_fn();
 8048fe7:	8b 45 08             	mov    0x8(%ebp),%eax
 8048fea:	8b 40 04             	mov    0x4(%eax),%eax
 8048fed:	ff d0                	call   *%eax
	tsk->status = THREAD_EXIT;
 8048fef:	8b 45 08             	mov    0x8(%ebp),%eax
 8048ff2:	c7 40 10 03 00 00 00 	movl   $0x3,0x10(%eax)
	printf("thread[%d] exited\n",tsk->id);
 8048ff9:	8b 45 08             	mov    0x8(%ebp),%eax
 8048ffc:	8b 00                	mov    (%eax),%eax
 8048ffe:	83 ec 08             	sub    $0x8,%esp
 8049001:	50                   	push   %eax
 8049002:	68 ed 96 04 08       	push   $0x80496ed
 8049007:	e8 d4 f6 ff ff       	call   80486e0 <printf@plt>
 804900c:	83 c4 10             	add    $0x10,%esp
	schedule();
 804900f:	e8 58 04 00 00       	call   804946c <schedule>
	printf("thread [%d] resume\n",tsk->id);
 8049014:	8b 45 08             	mov    0x8(%ebp),%eax
 8049017:	8b 00                	mov    (%eax),%eax
 8049019:	83 ec 08             	sub    $0x8,%esp
 804901c:	50                   	push   %eax
 804901d:	68 00 97 04 08       	push   $0x8049700
 8049022:	e8 b9 f6 ff ff       	call   80486e0 <printf@plt>
 8049027:	83 c4 10             	add    $0x10,%esp
}
 804902a:	90                   	nop
 804902b:	c9                   	leave  
 804902c:	c3                   	ret    

0804902d <thread_create>:

int thread_create(int *tid,void (*start_routine)()) {
 804902d:	55                   	push   %ebp
 804902e:	89 e5                	mov    %esp,%ebp
 8049030:	83 ec 18             	sub    $0x18,%esp
	int id = -1;
 8049033:	c7 45 ec ff ff ff ff 	movl   $0xffffffff,-0x14(%ebp)
	struct task_struct *tsk = 
 804903a:	83 ec 0c             	sub    $0xc,%esp
 804903d:	68 1c 10 00 00       	push   $0x101c
 8049042:	e8 19 f7 ff ff       	call   8048760 <malloc@plt>
 8049047:	83 c4 10             	add    $0x10,%esp
 804904a:	89 45 f0             	mov    %eax,-0x10(%ebp)
		(struct task_struct*)malloc(sizeof(struct task_struct));
	
	//find an empty position
	while(++id < NR_TASKS && task[id]);
 804904d:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
 8049051:	83 7d ec 0f          	cmpl   $0xf,-0x14(%ebp)
 8049055:	7f 0e                	jg     8049065 <thread_create+0x38>
 8049057:	8b 45 ec             	mov    -0x14(%ebp),%eax
 804905a:	8b 04 85 a0 c0 04 08 	mov    0x804c0a0(,%eax,4),%eax
 8049061:	85 c0                	test   %eax,%eax
 8049063:	75 e8                	jne    804904d <thread_create+0x20>
	
	//cannot find it
	if(id == NR_TASKS) return -1;
 8049065:	83 7d ec 10          	cmpl   $0x10,-0x14(%ebp)
 8049069:	75 0a                	jne    8049075 <thread_create+0x48>
 804906b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 8049070:	e9 0d 01 00 00       	jmp    8049182 <thread_create+0x155>

	//put it in the empty position
	task[id] = tsk;
 8049075:	8b 45 ec             	mov    -0x14(%ebp),%eax
 8049078:	8b 55 f0             	mov    -0x10(%ebp),%edx
 804907b:	89 14 85 a0 c0 04 08 	mov    %edx,0x804c0a0(,%eax,4)

	//set tid
	if(tid) *tid = id;
 8049082:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
 8049086:	74 08                	je     8049090 <thread_create+0x63>
 8049088:	8b 45 08             	mov    0x8(%ebp),%eax
 804908b:	8b 55 ec             	mov    -0x14(%ebp),%edx
 804908e:	89 10                	mov    %edx,(%eax)

	//init thread
	tsk->id = id;
 8049090:	8b 45 f0             	mov    -0x10(%ebp),%eax
 8049093:	8b 55 ec             	mov    -0x14(%ebp),%edx
 8049096:	89 10                	mov    %edx,(%eax)
	tsk->th_fn = start_routine;
 8049098:	8b 45 f0             	mov    -0x10(%ebp),%eax
 804909b:	8b 55 0c             	mov    0xc(%ebp),%edx
 804909e:	89 50 04             	mov    %edx,0x4(%eax)
	int *stack = tsk->stack;
 80490a1:	8b 45 f0             	mov    -0x10(%ebp),%eax
 80490a4:	83 c0 1c             	add    $0x1c,%eax
 80490a7:	89 45 f4             	mov    %eax,-0xc(%ebp)
	tsk->esp = (int)(stack + STACK_SIZE - 11);
 80490aa:	8b 45 f4             	mov    -0xc(%ebp),%eax
 80490ad:	05 d4 0f 00 00       	add    $0xfd4,%eax
 80490b2:	89 c2                	mov    %eax,%edx
 80490b4:	8b 45 f0             	mov    -0x10(%ebp),%eax
 80490b7:	89 50 08             	mov    %edx,0x8(%eax)
	tsk->wakeuptime = 0;
 80490ba:	8b 45 f0             	mov    -0x10(%ebp),%eax
 80490bd:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
	tsk->status = THREAD_RUNNING;
 80490c4:	8b 45 f0             	mov    -0x10(%ebp),%eax
 80490c7:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)
	tsk->counter = 15;
 80490ce:	8b 45 f0             	mov    -0x10(%ebp),%eax
 80490d1:	c7 40 14 0f 00 00 00 	movl   $0xf,0x14(%eax)
	tsk->priority = 15;
 80490d8:	8b 45 f0             	mov    -0x10(%ebp),%eax
 80490db:	c7 40 18 0f 00 00 00 	movl   $0xf,0x18(%eax)
	//init func stack frame
	stack[STACK_SIZE - 11] = 7;
 80490e2:	8b 45 f4             	mov    -0xc(%ebp),%eax
 80490e5:	05 d4 0f 00 00       	add    $0xfd4,%eax
 80490ea:	c7 00 07 00 00 00    	movl   $0x7,(%eax)
	stack[STACK_SIZE - 10] = 6;
 80490f0:	8b 45 f4             	mov    -0xc(%ebp),%eax
 80490f3:	05 d8 0f 00 00       	add    $0xfd8,%eax
 80490f8:	c7 00 06 00 00 00    	movl   $0x6,(%eax)
	stack[STACK_SIZE - 9] = 5;
 80490fe:	8b 45 f4             	mov    -0xc(%ebp),%eax
 8049101:	05 dc 0f 00 00       	add    $0xfdc,%eax
 8049106:	c7 00 05 00 00 00    	movl   $0x5,(%eax)
	stack[STACK_SIZE - 8] = 4;
 804910c:	8b 45 f4             	mov    -0xc(%ebp),%eax
 804910f:	05 e0 0f 00 00       	add    $0xfe0,%eax
 8049114:	c7 00 04 00 00 00    	movl   $0x4,(%eax)
	stack[STACK_SIZE - 7] = 3;
 804911a:	8b 45 f4             	mov    -0xc(%ebp),%eax
 804911d:	05 e4 0f 00 00       	add    $0xfe4,%eax
 8049122:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
	stack[STACK_SIZE - 6] = 2;
 8049128:	8b 45 f4             	mov    -0xc(%ebp),%eax
 804912b:	05 e8 0f 00 00       	add    $0xfe8,%eax
 8049130:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
	stack[STACK_SIZE - 5] = 1;
 8049136:	8b 45 f4             	mov    -0xc(%ebp),%eax
 8049139:	05 ec 0f 00 00       	add    $0xfec,%eax
 804913e:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
	stack[STACK_SIZE - 4] = 0;
 8049144:	8b 45 f4             	mov    -0xc(%ebp),%eax
 8049147:	05 f0 0f 00 00       	add    $0xff0,%eax
 804914c:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	stack[STACK_SIZE - 3] = (int)start;
 8049152:	8b 45 f4             	mov    -0xc(%ebp),%eax
 8049155:	05 f4 0f 00 00       	add    $0xff4,%eax
 804915a:	ba e1 8f 04 08       	mov    $0x8048fe1,%edx
 804915f:	89 10                	mov    %edx,(%eax)
	stack[STACK_SIZE - 2] = 100;
 8049161:	8b 45 f4             	mov    -0xc(%ebp),%eax
 8049164:	05 f8 0f 00 00       	add    $0xff8,%eax
 8049169:	c7 00 64 00 00 00    	movl   $0x64,(%eax)
	stack[STACK_SIZE - 1] = (int)tsk;
 804916f:	8b 45 f4             	mov    -0xc(%ebp),%eax
 8049172:	8d 90 fc 0f 00 00    	lea    0xffc(%eax),%edx
 8049178:	8b 45 f0             	mov    -0x10(%ebp),%eax
 804917b:	89 02                	mov    %eax,(%edx)

	return 0;
 804917d:	b8 00 00 00 00       	mov    $0x0,%eax
}
 8049182:	c9                   	leave  
 8049183:	c3                   	ret    

08049184 <thread_join>:

int thread_join(int tid) {
 8049184:	55                   	push   %ebp
 8049185:	89 e5                	mov    %esp,%ebp
 8049187:	83 ec 08             	sub    $0x8,%esp
	while(task[tid]->status != THREAD_EXIT) {
 804918a:	eb 05                	jmp    8049191 <thread_join+0xd>
		schedule();
 804918c:	e8 db 02 00 00       	call   804946c <schedule>

	return 0;
}

int thread_join(int tid) {
	while(task[tid]->status != THREAD_EXIT) {
 8049191:	8b 45 08             	mov    0x8(%ebp),%eax
 8049194:	8b 04 85 a0 c0 04 08 	mov    0x804c0a0(,%eax,4),%eax
 804919b:	8b 40 10             	mov    0x10(%eax),%eax
 804919e:	83 f8 03             	cmp    $0x3,%eax
 80491a1:	75 e9                	jne    804918c <thread_join+0x8>
		schedule();
	}
	free(task[tid]);
 80491a3:	8b 45 08             	mov    0x8(%ebp),%eax
 80491a6:	8b 04 85 a0 c0 04 08 	mov    0x804c0a0(,%eax,4),%eax
 80491ad:	83 ec 0c             	sub    $0xc,%esp
 80491b0:	50                   	push   %eax
 80491b1:	e8 4a f5 ff ff       	call   8048700 <free@plt>
 80491b6:	83 c4 10             	add    $0x10,%esp
	task[tid] = NULL;
 80491b9:	8b 45 08             	mov    0x8(%ebp),%eax
 80491bc:	c7 04 85 a0 c0 04 08 	movl   $0x0,0x804c0a0(,%eax,4)
 80491c3:	00 00 00 00 

}
 80491c7:	90                   	nop
 80491c8:	c9                   	leave  
 80491c9:	c3                   	ret    

080491ca <getmstime>:

static struct task_struct *pick();
void switch_to(struct task_struct *next);
void schedule();
void mysleep(int seconds);
static unsigned int getmstime() {
 80491ca:	55                   	push   %ebp
 80491cb:	89 e5                	mov    %esp,%ebp
 80491cd:	53                   	push   %ebx
 80491ce:	83 ec 14             	sub    $0x14,%esp
 80491d1:	65 a1 14 00 00 00    	mov    %gs:0x14,%eax
 80491d7:	89 45 f4             	mov    %eax,-0xc(%ebp)
 80491da:	31 c0                	xor    %eax,%eax
		struct timeval {
			long int tv_sec;// s
			long int tv_usec;// ms
		}
	*/
	if(gettimeofday(&tv,NULL) < 0) {//get the time begin in 1970-01-01 00:00:00
 80491dc:	83 ec 08             	sub    $0x8,%esp
 80491df:	6a 00                	push   $0x0
 80491e1:	8d 45 ec             	lea    -0x14(%ebp),%eax
 80491e4:	50                   	push   %eax
 80491e5:	e8 36 f5 ff ff       	call   8048720 <gettimeofday@plt>
 80491ea:	83 c4 10             	add    $0x10,%esp
 80491ed:	85 c0                	test   %eax,%eax
 80491ef:	79 1a                	jns    804920b <getmstime+0x41>
		perror("gettimeofday");
 80491f1:	83 ec 0c             	sub    $0xc,%esp
 80491f4:	68 14 97 04 08       	push   $0x8049714
 80491f9:	e8 42 f5 ff ff       	call   8048740 <perror@plt>
 80491fe:	83 c4 10             	add    $0x10,%esp
		exit(-1);
 8049201:	83 ec 0c             	sub    $0xc,%esp
 8049204:	6a ff                	push   $0xffffffff
 8049206:	e8 75 f5 ff ff       	call   8048780 <exit@plt>
	}
	
	return tv.tv_sec * 1000 + tv.tv_usec / 1000;//固定形式返回微秒
 804920b:	8b 45 ec             	mov    -0x14(%ebp),%eax
 804920e:	69 d8 e8 03 00 00    	imul   $0x3e8,%eax,%ebx
 8049214:	8b 4d f0             	mov    -0x10(%ebp),%ecx
 8049217:	ba d3 4d 62 10       	mov    $0x10624dd3,%edx
 804921c:	89 c8                	mov    %ecx,%eax
 804921e:	f7 ea                	imul   %edx
 8049220:	c1 fa 06             	sar    $0x6,%edx
 8049223:	89 c8                	mov    %ecx,%eax
 8049225:	c1 f8 1f             	sar    $0x1f,%eax
 8049228:	29 c2                	sub    %eax,%edx
 804922a:	89 d0                	mov    %edx,%eax
 804922c:	01 d8                	add    %ebx,%eax
}
 804922e:	8b 5d f4             	mov    -0xc(%ebp),%ebx
 8049231:	65 33 1d 14 00 00 00 	xor    %gs:0x14,%ebx
 8049238:	74 05                	je     804923f <getmstime+0x75>
 804923a:	e8 f1 f4 ff ff       	call   8048730 <__stack_chk_fail@plt>
 804923f:	8b 5d fc             	mov    -0x4(%ebp),%ebx
 8049242:	c9                   	leave  
 8049243:	c3                   	ret    

08049244 <pick>:
static struct task_struct *pick() {
 8049244:	55                   	push   %ebp
 8049245:	89 e5                	mov    %esp,%ebp
 8049247:	83 ec 18             	sub    $0x18,%esp
	int i,next,c;
	
	//make sleep to running status
	for(i = 0; i < NR_TASKS; ++i) {
 804924a:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
 8049251:	eb 4d                	jmp    80492a0 <pick+0x5c>
		if(task[i] && task[i]->status != THREAD_EXIT &&
 8049253:	8b 45 ec             	mov    -0x14(%ebp),%eax
 8049256:	8b 04 85 a0 c0 04 08 	mov    0x804c0a0(,%eax,4),%eax
 804925d:	85 c0                	test   %eax,%eax
 804925f:	74 3b                	je     804929c <pick+0x58>
 8049261:	8b 45 ec             	mov    -0x14(%ebp),%eax
 8049264:	8b 04 85 a0 c0 04 08 	mov    0x804c0a0(,%eax,4),%eax
 804926b:	8b 40 10             	mov    0x10(%eax),%eax
 804926e:	83 f8 03             	cmp    $0x3,%eax
 8049271:	74 29                	je     804929c <pick+0x58>
			getmstime() > task[i]->wakeuptime) {
 8049273:	e8 52 ff ff ff       	call   80491ca <getmstime>
 8049278:	89 c2                	mov    %eax,%edx
 804927a:	8b 45 ec             	mov    -0x14(%ebp),%eax
 804927d:	8b 04 85 a0 c0 04 08 	mov    0x804c0a0(,%eax,4),%eax
 8049284:	8b 40 0c             	mov    0xc(%eax),%eax
static struct task_struct *pick() {
	int i,next,c;
	
	//make sleep to running status
	for(i = 0; i < NR_TASKS; ++i) {
		if(task[i] && task[i]->status != THREAD_EXIT &&
 8049287:	39 c2                	cmp    %eax,%edx
 8049289:	76 11                	jbe    804929c <pick+0x58>
			getmstime() > task[i]->wakeuptime) {
			task[i]->status = THREAD_RUNNING;
 804928b:	8b 45 ec             	mov    -0x14(%ebp),%eax
 804928e:	8b 04 85 a0 c0 04 08 	mov    0x804c0a0(,%eax,4),%eax
 8049295:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)
}
static struct task_struct *pick() {
	int i,next,c;
	
	//make sleep to running status
	for(i = 0; i < NR_TASKS; ++i) {
 804929c:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
 80492a0:	83 7d ec 0f          	cmpl   $0xf,-0x14(%ebp)
 80492a4:	7e ad                	jle    8049253 <pick+0xf>
		}
	}

	//
	while(1) {
		c = -1;
 80492a6:	c7 45 f4 ff ff ff ff 	movl   $0xffffffff,-0xc(%ebp)
		next = 0;
 80492ad:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)

		//find the running and the thread with  biggest counter
		for(i = 0; i < NR_TASKS; ++i) {
 80492b4:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
 80492bb:	eb 4f                	jmp    804930c <pick+0xc8>
			if(!task[i]) continue;
 80492bd:	8b 45 ec             	mov    -0x14(%ebp),%eax
 80492c0:	8b 04 85 a0 c0 04 08 	mov    0x804c0a0(,%eax,4),%eax
 80492c7:	85 c0                	test   %eax,%eax
 80492c9:	74 3c                	je     8049307 <pick+0xc3>
			if(task[i]->status == THREAD_RUNNING && task[i]->counter > c) {
 80492cb:	8b 45 ec             	mov    -0x14(%ebp),%eax
 80492ce:	8b 04 85 a0 c0 04 08 	mov    0x804c0a0(,%eax,4),%eax
 80492d5:	8b 40 10             	mov    0x10(%eax),%eax
 80492d8:	83 f8 01             	cmp    $0x1,%eax
 80492db:	75 2b                	jne    8049308 <pick+0xc4>
 80492dd:	8b 45 ec             	mov    -0x14(%ebp),%eax
 80492e0:	8b 04 85 a0 c0 04 08 	mov    0x804c0a0(,%eax,4),%eax
 80492e7:	8b 40 14             	mov    0x14(%eax),%eax
 80492ea:	3b 45 f4             	cmp    -0xc(%ebp),%eax
 80492ed:	7e 19                	jle    8049308 <pick+0xc4>
				c = task[i]->counter;
 80492ef:	8b 45 ec             	mov    -0x14(%ebp),%eax
 80492f2:	8b 04 85 a0 c0 04 08 	mov    0x804c0a0(,%eax,4),%eax
 80492f9:	8b 40 14             	mov    0x14(%eax),%eax
 80492fc:	89 45 f4             	mov    %eax,-0xc(%ebp)
				next = i;
 80492ff:	8b 45 ec             	mov    -0x14(%ebp),%eax
 8049302:	89 45 f0             	mov    %eax,-0x10(%ebp)
 8049305:	eb 01                	jmp    8049308 <pick+0xc4>
		c = -1;
		next = 0;

		//find the running and the thread with  biggest counter
		for(i = 0; i < NR_TASKS; ++i) {
			if(!task[i]) continue;
 8049307:	90                   	nop
	while(1) {
		c = -1;
		next = 0;

		//find the running and the thread with  biggest counter
		for(i = 0; i < NR_TASKS; ++i) {
 8049308:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
 804930c:	83 7d ec 0f          	cmpl   $0xf,-0x14(%ebp)
 8049310:	7e ab                	jle    80492bd <pick+0x79>
		/*
		   c == 0 all the counter == 0
		   c == -1 all status is sleep or counter == 0,now next is 0,so return to init_task
		   c == default  found the next thread
		*/
		if(c) break;
 8049312:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
 8049316:	75 57                	jne    804936f <pick+0x12b>
		
		//all the counter == 0
		if(c == 0) {
 8049318:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
 804931c:	75 88                	jne    80492a6 <pick+0x62>
			for(i = 0; i < NR_TASKS; ++i) {
 804931e:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
 8049325:	eb 3d                	jmp    8049364 <pick+0x120>
				if(task[i]) {//make it bigger,or distribute timer
 8049327:	8b 45 ec             	mov    -0x14(%ebp),%eax
 804932a:	8b 04 85 a0 c0 04 08 	mov    0x804c0a0(,%eax,4),%eax
 8049331:	85 c0                	test   %eax,%eax
 8049333:	74 2b                	je     8049360 <pick+0x11c>

					task[i]->counter = task[i]->priority + (task[i]->counter>>1);
 8049335:	8b 45 ec             	mov    -0x14(%ebp),%eax
 8049338:	8b 04 85 a0 c0 04 08 	mov    0x804c0a0(,%eax,4),%eax
 804933f:	8b 55 ec             	mov    -0x14(%ebp),%edx
 8049342:	8b 14 95 a0 c0 04 08 	mov    0x804c0a0(,%edx,4),%edx
 8049349:	8b 4a 18             	mov    0x18(%edx),%ecx
 804934c:	8b 55 ec             	mov    -0x14(%ebp),%edx
 804934f:	8b 14 95 a0 c0 04 08 	mov    0x804c0a0(,%edx,4),%edx
 8049356:	8b 52 14             	mov    0x14(%edx),%edx
 8049359:	d1 fa                	sar    %edx
 804935b:	01 ca                	add    %ecx,%edx
 804935d:	89 50 14             	mov    %edx,0x14(%eax)
		*/
		if(c) break;
		
		//all the counter == 0
		if(c == 0) {
			for(i = 0; i < NR_TASKS; ++i) {
 8049360:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
 8049364:	83 7d ec 0f          	cmpl   $0xf,-0x14(%ebp)
 8049368:	7e bd                	jle    8049327 <pick+0xe3>

					task[i]->counter = task[i]->priority + (task[i]->counter>>1);
				}
			}
		}
	}
 804936a:	e9 37 ff ff ff       	jmp    80492a6 <pick+0x62>
		/*
		   c == 0 all the counter == 0
		   c == -1 all status is sleep or counter == 0,now next is 0,so return to init_task
		   c == default  found the next thread
		*/
		if(c) break;
 804936f:	90                   	nop
					task[i]->counter = task[i]->priority + (task[i]->counter>>1);
				}
			}
		}
	}
	return task[next];
 8049370:	8b 45 f0             	mov    -0x10(%ebp),%eax
 8049373:	8b 04 85 a0 c0 04 08 	mov    0x804c0a0(,%eax,4),%eax
}
 804937a:	c9                   	leave  
 804937b:	c3                   	ret    

0804937c <closealarm>:

void closealarm() {
 804937c:	55                   	push   %ebp
 804937d:	89 e5                	mov    %esp,%ebp
 804937f:	81 ec 98 00 00 00    	sub    $0x98,%esp
 8049385:	65 a1 14 00 00 00    	mov    %gs:0x14,%eax
 804938b:	89 45 f4             	mov    %eax,-0xc(%ebp)
 804938e:	31 c0                	xor    %eax,%eax
	sigset_t mask;
	sigemptyset(&mask);
 8049390:	83 ec 0c             	sub    $0xc,%esp
 8049393:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
 8049399:	50                   	push   %eax
 804939a:	e8 11 f4 ff ff       	call   80487b0 <sigemptyset@plt>
 804939f:	83 c4 10             	add    $0x10,%esp
	sigaddset(&mask,SIGALRM);
 80493a2:	83 ec 08             	sub    $0x8,%esp
 80493a5:	6a 0e                	push   $0xe
 80493a7:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
 80493ad:	50                   	push   %eax
 80493ae:	e8 ed f3 ff ff       	call   80487a0 <sigaddset@plt>
 80493b3:	83 c4 10             	add    $0x10,%esp
	if(sigprocmask(SIG_BLOCK,&mask,NULL) < 0) {
 80493b6:	83 ec 04             	sub    $0x4,%esp
 80493b9:	6a 00                	push   $0x0
 80493bb:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
 80493c1:	50                   	push   %eax
 80493c2:	6a 00                	push   $0x0
 80493c4:	e8 27 f3 ff ff       	call   80486f0 <sigprocmask@plt>
 80493c9:	83 c4 10             	add    $0x10,%esp
 80493cc:	85 c0                	test   %eax,%eax
 80493ce:	79 10                	jns    80493e0 <closealarm+0x64>
		perror("sigprocmask BLOCK");
 80493d0:	83 ec 0c             	sub    $0xc,%esp
 80493d3:	68 21 97 04 08       	push   $0x8049721
 80493d8:	e8 63 f3 ff ff       	call   8048740 <perror@plt>
 80493dd:	83 c4 10             	add    $0x10,%esp
	}
}
 80493e0:	90                   	nop
 80493e1:	8b 45 f4             	mov    -0xc(%ebp),%eax
 80493e4:	65 33 05 14 00 00 00 	xor    %gs:0x14,%eax
 80493eb:	74 05                	je     80493f2 <closealarm+0x76>
 80493ed:	e8 3e f3 ff ff       	call   8048730 <__stack_chk_fail@plt>
 80493f2:	c9                   	leave  
 80493f3:	c3                   	ret    

080493f4 <openalarm>:

void openalarm() {
 80493f4:	55                   	push   %ebp
 80493f5:	89 e5                	mov    %esp,%ebp
 80493f7:	81 ec 98 00 00 00    	sub    $0x98,%esp
 80493fd:	65 a1 14 00 00 00    	mov    %gs:0x14,%eax
 8049403:	89 45 f4             	mov    %eax,-0xc(%ebp)
 8049406:	31 c0                	xor    %eax,%eax
	sigset_t mask;
	sigemptyset(&mask);
 8049408:	83 ec 0c             	sub    $0xc,%esp
 804940b:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
 8049411:	50                   	push   %eax
 8049412:	e8 99 f3 ff ff       	call   80487b0 <sigemptyset@plt>
 8049417:	83 c4 10             	add    $0x10,%esp
	sigaddset(&mask,SIGALRM);
 804941a:	83 ec 08             	sub    $0x8,%esp
 804941d:	6a 0e                	push   $0xe
 804941f:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
 8049425:	50                   	push   %eax
 8049426:	e8 75 f3 ff ff       	call   80487a0 <sigaddset@plt>
 804942b:	83 c4 10             	add    $0x10,%esp
	if(sigprocmask(SIG_UNBLOCK,&mask,NULL) < 0) {
 804942e:	83 ec 04             	sub    $0x4,%esp
 8049431:	6a 00                	push   $0x0
 8049433:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
 8049439:	50                   	push   %eax
 804943a:	6a 01                	push   $0x1
 804943c:	e8 af f2 ff ff       	call   80486f0 <sigprocmask@plt>
 8049441:	83 c4 10             	add    $0x10,%esp
 8049444:	85 c0                	test   %eax,%eax
 8049446:	79 10                	jns    8049458 <openalarm+0x64>
		perror("sigprocmask BLOCK");
 8049448:	83 ec 0c             	sub    $0xc,%esp
 804944b:	68 21 97 04 08       	push   $0x8049721
 8049450:	e8 eb f2 ff ff       	call   8048740 <perror@plt>
 8049455:	83 c4 10             	add    $0x10,%esp
	}
	
}
 8049458:	90                   	nop
 8049459:	8b 45 f4             	mov    -0xc(%ebp),%eax
 804945c:	65 33 05 14 00 00 00 	xor    %gs:0x14,%eax
 8049463:	74 05                	je     804946a <openalarm+0x76>
 8049465:	e8 c6 f2 ff ff       	call   8048730 <__stack_chk_fail@plt>
 804946a:	c9                   	leave  
 804946b:	c3                   	ret    

0804946c <schedule>:
void schedule() {
 804946c:	55                   	push   %ebp
 804946d:	89 e5                	mov    %esp,%ebp
 804946f:	83 ec 18             	sub    $0x18,%esp
	struct task_struct *next = pick();
 8049472:	e8 cd fd ff ff       	call   8049244 <pick>
 8049477:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(next) {
 804947a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
 804947e:	74 0e                	je     804948e <schedule+0x22>
		switch_to(next);
 8049480:	83 ec 0c             	sub    $0xc,%esp
 8049483:	ff 75 f4             	pushl  -0xc(%ebp)
 8049486:	e8 eb 00 00 00       	call   8049576 <switch_to>
 804948b:	83 c4 10             	add    $0x10,%esp
	}
}
 804948e:	90                   	nop
 804948f:	c9                   	leave  
 8049490:	c3                   	ret    

08049491 <mysleep>:

void mysleep(int seconds) {
 8049491:	55                   	push   %ebp
 8049492:	89 e5                	mov    %esp,%ebp
 8049494:	53                   	push   %ebx
 8049495:	83 ec 04             	sub    $0x4,%esp
	current->wakeuptime = getmstime() + 1000 * seconds;//转化为微秒
 8049498:	8b 1d 9c c0 04 08    	mov    0x804c09c,%ebx
 804949e:	e8 27 fd ff ff       	call   80491ca <getmstime>
 80494a3:	89 c2                	mov    %eax,%edx
 80494a5:	8b 45 08             	mov    0x8(%ebp),%eax
 80494a8:	69 c0 e8 03 00 00    	imul   $0x3e8,%eax,%eax
 80494ae:	01 d0                	add    %edx,%eax
 80494b0:	89 43 0c             	mov    %eax,0xc(%ebx)
	current->status = THREAD_SLEEP;
 80494b3:	a1 9c c0 04 08       	mov    0x804c09c,%eax
 80494b8:	c7 40 10 02 00 00 00 	movl   $0x2,0x10(%eax)

	schedule();
 80494bf:	e8 a8 ff ff ff       	call   804946c <schedule>
}
 80494c4:	90                   	nop
 80494c5:	83 c4 04             	add    $0x4,%esp
 80494c8:	5b                   	pop    %ebx
 80494c9:	5d                   	pop    %ebp
 80494ca:	c3                   	ret    

080494cb <do_timer>:

static void do_timer() {
 80494cb:	55                   	push   %ebp
 80494cc:	89 e5                	mov    %esp,%ebp
 80494ce:	83 ec 08             	sub    $0x8,%esp
	if(--current->counter > 0) return;
 80494d1:	a1 9c c0 04 08       	mov    0x804c09c,%eax
 80494d6:	8b 50 14             	mov    0x14(%eax),%edx
 80494d9:	83 ea 01             	sub    $0x1,%edx
 80494dc:	89 50 14             	mov    %edx,0x14(%eax)
 80494df:	8b 40 14             	mov    0x14(%eax),%eax
 80494e2:	85 c0                	test   %eax,%eax
 80494e4:	7f 13                	jg     80494f9 <do_timer+0x2e>
	current->counter = 0;
 80494e6:	a1 9c c0 04 08       	mov    0x804c09c,%eax
 80494eb:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
	schedule();
 80494f2:	e8 75 ff ff ff       	call   804946c <schedule>
 80494f7:	eb 01                	jmp    80494fa <do_timer+0x2f>

	schedule();
}

static void do_timer() {
	if(--current->counter > 0) return;
 80494f9:	90                   	nop
	current->counter = 0;
	schedule();
}
 80494fa:	c9                   	leave  
 80494fb:	c3                   	ret    

080494fc <init>:
__attribute__((constructor))
static void init() {
 80494fc:	55                   	push   %ebp
 80494fd:	89 e5                	mov    %esp,%ebp
 80494ff:	83 ec 28             	sub    $0x28,%esp
 8049502:	65 a1 14 00 00 00    	mov    %gs:0x14,%eax
 8049508:	89 45 f4             	mov    %eax,-0xc(%ebp)
 804950b:	31 c0                	xor    %eax,%eax
	struct itimerval value;
	value.it_value.tv_sec = 0;
 804950d:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	value.it_value.tv_usec = 1000;
 8049514:	c7 45 f0 e8 03 00 00 	movl   $0x3e8,-0x10(%ebp)
	value.it_interval.tv_sec = 0;
 804951b:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	value.it_interval.tv_usec = 1000 * 10;
 8049522:	c7 45 e8 10 27 00 00 	movl   $0x2710,-0x18(%ebp)
	if(setitimer(ITIMER_REAL,&value,NULL) < 0) {
 8049529:	83 ec 04             	sub    $0x4,%esp
 804952c:	6a 00                	push   $0x0
 804952e:	8d 45 e4             	lea    -0x1c(%ebp),%eax
 8049531:	50                   	push   %eax
 8049532:	6a 00                	push   $0x0
 8049534:	e8 77 f1 ff ff       	call   80486b0 <setitimer@plt>
 8049539:	83 c4 10             	add    $0x10,%esp
 804953c:	85 c0                	test   %eax,%eax
 804953e:	79 10                	jns    8049550 <init+0x54>
		perror("setitimer");
 8049540:	83 ec 0c             	sub    $0xc,%esp
 8049543:	68 33 97 04 08       	push   $0x8049733
 8049548:	e8 f3 f1 ff ff       	call   8048740 <perror@plt>
 804954d:	83 c4 10             	add    $0x10,%esp
	}
	signal(SIGALRM,do_timer);
 8049550:	83 ec 08             	sub    $0x8,%esp
 8049553:	68 cb 94 04 08       	push   $0x80494cb
 8049558:	6a 0e                	push   $0xe
 804955a:	e8 b1 f1 ff ff       	call   8048710 <signal@plt>
 804955f:	83 c4 10             	add    $0x10,%esp
}
 8049562:	90                   	nop
 8049563:	8b 45 f4             	mov    -0xc(%ebp),%eax
 8049566:	65 33 05 14 00 00 00 	xor    %gs:0x14,%eax
 804956d:	74 05                	je     8049574 <init+0x78>
 804956f:	e8 bc f1 ff ff       	call   8048730 <__stack_chk_fail@plt>
 8049574:	c9                   	leave  
 8049575:	c3                   	ret    

08049576 <switch_to>:
/*void switch_to(struct task_struct* next)*/

.section .text
.global switch_to
switch_to:
	call closealarm
 8049576:	e8 01 fe ff ff       	call   804937c <closealarm>
	push %ebp
 804957b:	55                   	push   %ebp
	mov %esp,%ebp /* in order to find flag */
 804957c:	89 e5                	mov    %esp,%ebp
	
	/*store the status*/
	push %edi
 804957e:	57                   	push   %edi
	push %esi
 804957f:	56                   	push   %esi
	push %ebx
 8049580:	53                   	push   %ebx
	push %edx
 8049581:	52                   	push   %edx
	push %ecx
 8049582:	51                   	push   %ecx
	push %eax
 8049583:	50                   	push   %eax
	pushfl
 8049584:	9c                   	pushf  
	

	/*prepare to change stack*/
	mov current,%eax /*store the esp*/
 8049585:	a1 9c c0 04 08       	mov    0x804c09c,%eax
	mov %esp,8(%eax)
 804958a:	89 60 08             	mov    %esp,0x8(%eax)
	mov 8(%ebp),%eax /*get the next thread id*/
 804958d:	8b 45 08             	mov    0x8(%ebp),%eax
	mov %eax,current /*set current the next thread*/
 8049590:	a3 9c c0 04 08       	mov    %eax,0x804c09c
	mov 8(%eax),%esp /*switch_to the stack of next thread*/
 8049595:	8b 60 08             	mov    0x8(%eax),%esp

	popfl
 8049598:	9d                   	popf   
	popl %eax
 8049599:	58                   	pop    %eax
	popl %edx
 804959a:	5a                   	pop    %edx
	popl %ecx
 804959b:	59                   	pop    %ecx
	popl %ebx
 804959c:	5b                   	pop    %ebx
	popl %esi
 804959d:	5e                   	pop    %esi
	popl %edi
 804959e:	5f                   	pop    %edi

	popl %ebp
 804959f:	5d                   	pop    %ebp
	call openalarm
 80495a0:	e8 4f fe ff ff       	call   80493f4 <openalarm>
	ret
 80495a5:	c3                   	ret    
 80495a6:	66 90                	xchg   %ax,%ax
 80495a8:	66 90                	xchg   %ax,%ax
 80495aa:	66 90                	xchg   %ax,%ax
 80495ac:	66 90                	xchg   %ax,%ax
 80495ae:	66 90                	xchg   %ax,%ax

080495b0 <__libc_csu_init>:
 80495b0:	55                   	push   %ebp
 80495b1:	57                   	push   %edi
 80495b2:	56                   	push   %esi
 80495b3:	53                   	push   %ebx
 80495b4:	e8 67 f2 ff ff       	call   8048820 <__x86.get_pc_thunk.bx>
 80495b9:	81 c3 47 1a 00 00    	add    $0x1a47,%ebx
 80495bf:	83 ec 0c             	sub    $0xc,%esp
 80495c2:	8b 6c 24 20          	mov    0x20(%esp),%ebp
 80495c6:	8d b3 04 ff ff ff    	lea    -0xfc(%ebx),%esi
 80495cc:	e8 a3 f0 ff ff       	call   8048674 <_init>
 80495d1:	8d 83 fc fe ff ff    	lea    -0x104(%ebx),%eax
 80495d7:	29 c6                	sub    %eax,%esi
 80495d9:	c1 fe 02             	sar    $0x2,%esi
 80495dc:	85 f6                	test   %esi,%esi
 80495de:	74 25                	je     8049605 <__libc_csu_init+0x55>
 80495e0:	31 ff                	xor    %edi,%edi
 80495e2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 80495e8:	83 ec 04             	sub    $0x4,%esp
 80495eb:	ff 74 24 2c          	pushl  0x2c(%esp)
 80495ef:	ff 74 24 2c          	pushl  0x2c(%esp)
 80495f3:	55                   	push   %ebp
 80495f4:	ff 94 bb fc fe ff ff 	call   *-0x104(%ebx,%edi,4)
 80495fb:	83 c7 01             	add    $0x1,%edi
 80495fe:	83 c4 10             	add    $0x10,%esp
 8049601:	39 f7                	cmp    %esi,%edi
 8049603:	75 e3                	jne    80495e8 <__libc_csu_init+0x38>
 8049605:	83 c4 0c             	add    $0xc,%esp
 8049608:	5b                   	pop    %ebx
 8049609:	5e                   	pop    %esi
 804960a:	5f                   	pop    %edi
 804960b:	5d                   	pop    %ebp
 804960c:	c3                   	ret    
 804960d:	8d 76 00             	lea    0x0(%esi),%esi

08049610 <__libc_csu_fini>:
 8049610:	f3 c3                	repz ret 

Disassembly of section .fini:

08049614 <_fini>:
 8049614:	53                   	push   %ebx
 8049615:	83 ec 08             	sub    $0x8,%esp
 8049618:	e8 03 f2 ff ff       	call   8048820 <__x86.get_pc_thunk.bx>
 804961d:	81 c3 e3 19 00 00    	add    $0x19e3,%ebx
 8049623:	83 c4 08             	add    $0x8,%esp
 8049626:	5b                   	pop    %ebx
 8049627:	c3                   	ret    
